PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Quantidade de profissionais de saúde por município, na métrica da FTE"'
profissionais_saude <- sqlQuery(channel, query, as.is = TRUE)
censo_uf <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/censo_uf.xlsx")
medicos_cfm <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/medicos_cfm.xlsx")
malha_UF <- st_read("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/02-scripts/malha_uf/BR_UF_2022.shp")
mapa_med_cfm <- malha_UF |>
left_join(censo_uf, by = c("NM_UF" = "UF"))
mapa_med_cfm <- mapa_med_cfm |>
left_join(medicos_cfm, by = c("SIGLA_UF" = "UF"))
mapa_med_cfm <- mapa_med_cfm |>
mutate(razao_med = (Medicos/populacao)*1000)
View(medicos_cfm)
View(mapa_med_cfm)
ggplot(mapa_med_cfm, aes(x = NM_UF, y = Medicos)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Categorias", y = "Valores", title = "Gráfico de Barras Horizontal") +
theme_minimal()  # Usar um tema minimalista
ggplot(mapa_med_cfm, aes(x = NM_UF, y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Categorias", y = "Valores", title = "Gráfico de Barras Horizontal") +
theme_minimal()  # Usar um tema minimalista
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, -razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_void()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_update()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_test()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_set()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_replace()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Razão de Médicos", title = "Médicos por Mil Habitantes por UF") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "Unidades Federativas", y = "Médicos por mil habitantes", title = "Médicos por Mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(y = "Médicos por mil habitantes", title = "Médicos por Mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity") +  # Usar estatística identity para barras de altura igual ao valor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Usar uma única cor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity", fill = "orange") +  # Usar uma única cor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity", fill = "red") +  # Usar uma única cor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Usar uma única cor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
ggsave('medicos_por_hab_uf_cfm.png', width = 8, height = 8, dpi = 500)
#FILTRANDO OS MEDICOS E MUNICIPIOS DE GOIÁS DA BASE DE FTS
medicos_municipios <- profissionais_saude |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
filter(categoria == "Médico")
#CALCULANDO A POPULAÇÃO TOTAL POR MUNICÍPIO
população_municipios <- faixa_total |>
select(ibge, municipio, total) |>
group_by(ibge, municipio) |>
summarise(população = sum(total)) |>
mutate(ibge = substr(ibge, 1, 6))
#CALCULANDO A RAZÃO MEDICO/POPULAÇÃO PARA TODOS OS NÍVEIS DE ATENÇÃO
medicos_total_mun <- medicos_municipios |>
select(cod_ibge, uf_sigla, FTE_40, municipio) |>
group_by(cod_ibge, uf_sigla, municipio) |>
summarise(medicos_FTE_40 = sum(FTE_40), .groups = 'drop')
# AGREGANDO A BASE DE MEDICOS POR MUNICÍPIO NA BASE POPULAÇÃO POR MUNICÍPIO
razao_med_total <- população_municipios |>
left_join(medicos_total_mun, by = c("ibge" = "cod_ibge")) |>
mutate(razão_medicos = medicos_FTE_40/população) #CRIANDO A VARIÁVEL RAZÃO DE MÉDICOS POR POPULAÇÃO
PIB <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/PIB.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
base_final <- razao_med_total |>
left_join(PIB, by = c("ibge" = "ibge")) |>
mutate(pib_percapita = (PIB/população)*1000)
base_final <- base_final |>
select(ibge, municipio.x, população, medicos_FTE_40, razão_medicos, pib_percapita)
mapaibge <- st_read("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/02-scripts/malha_municipal_go/GO_Municipios_2022.shp") |>
mutate(CD_MUN = substr(CD_MUN, 1, 6))
View(base_final)
View(mapaibge)
teste <- mapa_ibe |>
left_join(base_final, by = c("CD_MUN" = "ibge"))
teste <- mapa_ibge |>
left_join(base_final, by = c("CD_MUN" = "ibge"))
teste <- mapaibge |>
left_join(base_final, by = c("CD_MUN" = "ibge"))
View(teste)
base_final <- mapaibge |>
left_join(base_final, by = c("CD_MUN" = "ibge"))
View(base_final)
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(10000, 300000)) +  # Use a escala de preenchimento Viridis
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
library(viridis)
detach("package:viridisLite", unload = TRUE)
library(viridisLite)
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(10000, 300000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
library(scales)
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(10000, 300000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_b(limits = c(10000, 300000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_b(limits = c(1000, 300000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(1000, 300000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(1000, 200000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "PIB per capita") +  # Etiqueta para a legenda de cores
theme_void()
ggplot(data = base_final) +
geom_sf(aes(fill = pib_percapita, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_b(limits = c(1000, 200000), labels = label_number()) +  # Use a escala de preenchimento Viridis e formate os números
labs(fill = "PIB per capita") +  # Etiqueta para a legenda de cores
theme_void()
ggsave('mapa_pib_percapita_goias.png', width = 8, height = 8, dpi = 500)
View(PIB)
somapib < sum(PIB$PIB)
somapib <- sum(PIB$PIB)
View(censo_municipios_goias)
View(população_municipios)
somapopulacao <- sum(população_municipios$população)
resultado <- somapib/somapopulacao
resultado <- round(somapib/somapopulacao, 2)
resultado <- round(somapib/somapopulacao, 2)*1000
# codigo para acessar dados de um datalake
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Open Analytics Layer".Infraestrutura."Quantidade de leitos de UTI por tipo e município"'
leitos_brasil <- sqlQuery(channel, query, as.is = TRUE)
# codigo para acessar dados de um datalake
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Open Analytics Layer".Infraestrutura."Quantidade de leitos de UTI por tipo e município"'
leitos_brasil <- sqlQuery(channel, query, as.is = TRUE)
# codigo para acessar dados de um datalake
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Open Analytics Layer".Infraestrutura."Quantidade de leitos de UTI por tipo e município"'
leitos_brasil <- sqlQuery(channel, query, as.is = TRUE)
# codigo para acessar dados de um datalake
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Quantidade de profissionais de saúde por município, na métrica da FTE"'
profissionais_saude <- sqlQuery(channel, query, as.is = TRUE)
query <- 'SELECT * FROM "Open Analytics Layer".Infraestrutura."Quantidade de leitos de UTI por tipo e município"'
leitos_brasil <- sqlQuery(channel, query, as.is = TRUE)
View(leitos_brasil)
View(profissionais_saude)
leitos_goias <- leitos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO")
View(leitos_goias)
query <- 'SELECT * FROM "Open Analytics Layer".Infraestrutura."Quantidade de estabelecimentos de saúde por tipo e nos municípios"'
estabelecimetos_brasil <- sqlQuery(channel, query, as.is = TRUE)
View(estabelecimetos_brasil)
estabelecimentos_goias <- estabelecimetos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO")
View(estabelecimentos_goias)
estabelecimentos_goias <- estabelecimetos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
group_by(cod_ibge)
estabelecimentos_goias <- estabelecimetos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
group_by(cod_ibge) |>
summarise(estabelecimentos = sum(numero_estabelecimentos))
estabelecimentos_goias <- estabelecimetos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
group_by(cod_ibge) |>
mutate(numero_estabelecimentos = as.numeric(numero_estabelecimentos)) |>
summarise(estabelecimentos = sum(numero_estabelecimentos))
{r}
library(tidyverse)
library(readxl)
library(RODBC)
library(geobr)
library(sf)
library(ggplot2)
library(PNADcIBGE)
library(srvyr)
base_pnadc <- get_pnadc(2023, 4, vars=c("VD4016","V4010", "UF"))
medicos_cfm <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/medicos_cfm.xlsx")
censo_uf <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/censo_uf.xlsx")
# SHAPEFILE PARA GERAR MAPA CLOROPÉTICO
malha_UF <- st_read("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/02-scripts/malha_uf/BR_UF_2022.shp")
#INTEGRAÇÃO DOS DATAFRAMES
mapa_med_cfm <- malha_UF |>
left_join(censo_uf, by = c("NM_UF" = "UF"))
mapa_med_cfm <- mapa_med_cfm |>
left_join(medicos_cfm, by = c("SIGLA_UF" = "UF"))
mapa_med_cfm <- mapa_med_cfm |>
mutate(razao_med = (Medicos/populacao)*1000)
#TRANSFORMAÇÃO DA RAZÃO DE MÉDICOS POR MIL HABITANTES
razao_medicos_brasil <- mapa_med_cfm |>
mutate(razao = (sum(Medicos)/sum(populacao))*1000)
#MAPA CLOROPÉTICO
ggplot(data = mapa_med_cfm) +
geom_sf(aes(fill = razao_med, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_b(limits = c(1, 7)) +  # Use a escala de preenchimento Viridis
labs(fill = "Médicos por mil hab.") +  # Etiqueta para a legenda de cores
theme_void() +
theme(
legend.box.spacing = unit(-2, "cm"))
# GRÁFICO DE BARRA HORIZONTAL
ggplot(mapa_med_cfm, aes(x = reorder(NM_UF, razao_med), y = razao_med)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Usar uma única cor
coord_flip() +  # Inverter os eixos para criar barras horizontais
labs(x = "", y = "Médicos por mil habitantes", title = "Médicos por mil Habitantes") +
theme_minimal()
#SALVANDO A IMAGEM GERADA
ggsave('medicos_por_hab_uf_cfm.png', width = 8, height = 8, dpi = 500)
censo_municipios_goias <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/censo municipios goias.xlsx")
# CONFIGURANDO BASE MASCULINO
faixa_masculino <- censo_municipios_goias[,1:23] |>
gather(key = "faixa_etaria", value = "total", 3:23) |>
mutate(sexo = "Masculino", .after = municipio) |>
mutate(faixa_etaria = gsub("-H", "", faixa_etaria))
# CONFIGURANDO BASE FEMININO
faixa_feminino <- censo_municipios_goias[,c(1:2, 24:44)] |>
gather(key = "faixa_etaria", value = "total", 3:23) |>
mutate(sexo = "Feminino", .after = municipio) |>
mutate(faixa_etaria = gsub("-M", "", faixa_etaria))
# EMPILHANDO AS DUAS BASES
faixa_total <- rbind(faixa_feminino, faixa_masculino) |>
mutate(total = replace_na(total, 0)) |>
mutate(total = gsub("-", "0", total)) |>
mutate(total = as.numeric(total))
# codigo para acessar dados de um datalake
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "Open Analytics Layer".Profissionais."Quantidade de profissionais de saúde por município, na métrica da FTE"'
profissionais_saude <- sqlQuery(channel, query, as.is = TRUE)
#FILTRANDO OS MEDICOS E MUNICIPIOS DE GOIÁS DA BASE DE FTS
medicos_municipios <- profissionais_saude |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
filter(categoria == "Médico")
#CALCULANDO A POPULAÇÃO TOTAL POR MUNICÍPIO
população_municipios <- faixa_total |>
select(ibge, municipio, total) |>
group_by(ibge, municipio) |>
summarise(população = sum(total)) |>
mutate(ibge = substr(ibge, 1, 6))
#CALCULANDO A RAZÃO MEDICO/POPULAÇÃO PARA TODOS OS NÍVEIS DE ATENÇÃO
medicos_total_mun <- medicos_municipios |>
select(cod_ibge, uf_sigla, FTE_40, municipio) |>
group_by(cod_ibge, uf_sigla, municipio) |>
summarise(medicos_FTE_40 = sum(FTE_40), .groups = 'drop')
# AGREGANDO A BASE DE MEDICOS POR MUNICÍPIO NA BASE POPULAÇÃO POR MUNICÍPIO
razao_med_total <- população_municipios |>
left_join(medicos_total_mun, by = c("ibge" = "cod_ibge")) |>
mutate(razão_medicos = medicos_FTE_40/população) #CRIANDO A VARIÁVEL RAZÃO DE MÉDICOS POR POPULAÇÃO
View(razao_med_total)
malha_municipal <- st_read("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/02-scripts/malha_municipal_go/GO_Municipios_2022.shp") |>
mutate(CD_MUN = substr(CD_MUN, 1, 6))
View(medicos_municipios)
View(malha_municipal)
base_final <- malha_municipal |>
left_join(razao_med_total, by = c("CD_MUN" = "ibge"))
View(base_final)
ggplot(data = base_final) +
geom_sf(aes(fill = razão_medicos, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_c(limits = c(0, 8)) +  # Use a escala de preenchimento Viridis
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
base_final <- base_final
mutate(razão_medicos = razão_medicos*1000)
base_final <- base_final |>
mutate(razão_medicos = razão_medicos*1000)
ggplot(data = base_final) +
geom_sf(aes(fill = razão_medicos, geometry = geometry)) +  # Adicione a estética geometry
scale_fill_viridis_b(limits = c(0, 8)) +  # Use a escala de preenchimento Viridis
labs(fill = "Médicos por mil hab") +  # Etiqueta para a legenda de cores
theme_void()
PIB <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/PIB.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
base_final <- base_final |>
left_join(PIB, by = c("ibge" = "ibge")) |>
mutate(pib_percapita = (PIB/população)*1000)
View(base_final)
base_final <- base_final |>
left_join(PIB, by = c("CD_MUN" = "ibge")) |>
mutate(pib_percapita = (PIB/população)*1000)
View(base_final)
base_final <- base_final |>
select(ibge, municipio.x, população, medicos_FTE_40, razão_medicos, pib_percapita)
base_final <- base_final |>
rename(ibge = CD_MUN)
base_final <- base_final |>
select(ibge, municipio.x, população, medicos_FTE_40, razão_medicos, pib_percapita)
IDH <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/IDH.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
base_final <- base_final |>
left_join(IDH, by = c("ibge" = "ibge"))
base_final <- base_final |>
select(-municipio.x)
Gini <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/Gini.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
base_final <- base_final |>
left_join(Gini, by = c("ibge" = "ibge"))
base_final <- base_final |>
select(-Territorialidades)
urban <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/Urbanização.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
urban <- urban |>
select(-municipio)
base_final <- base_final |>
left_join(urban, by = c("ibge" = "ibge"))
base_final <- base_final |>
mutate(tx_urban = km_urbanizado/km_mapeado)
cadunico <- read_excel("C:/Users/alefs/OneDrive/Documentos/Analise_FTS_medicos/fts_medico/01-dados/cadunico.xlsx") |>
mutate(ibge = substr(ibge, 1, 6))
cadunico <- cadunico |>
select(-Unidade_Territorial)
base_final <- base_final |>
left_join(cadunico, by = c("ibge" = "ibge"))
base_final <- base_final |>
mutate(cadunico_pop = `Quantidade total de pessoas inscritas no Cadastro Único`/população)
base_final <- base_final |>
select(-medicos_FTE_40, -população, -km_urbanizado, -km_mapeado, - `Quantidade total de pessoas inscritas no Cadastro Único`)
base_final <- base_final |>
query <- 'SELECT * FROM "Open Analytics Layer".Infraestrutura."Quantidade de leitos de UTI por tipo e município"'
leitos_brasil <- sqlQuery(channel, query, as.is = TRUE)
leitos_goias <- leitos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO")
query <- 'SELECT * FROM "Open Analytics Layer".Infraestrutura."Quantidade de estabelecimentos de saúde por tipo e nos municípios"'
estabelecimetos_brasil <- sqlQuery(channel, query, as.is = TRUE)
estabelecimentos_goias <- estabelecimetos_brasil |>
filter(ano == "2024") |>
filter(uf_sigla == "GO") |>
group_by(cod_ibge) |>
mutate(numero_estabelecimentos = as.numeric(numero_estabelecimentos)) |>
summarise(estabelecimentos = sum(numero_estabelecimentos))
View(estabelecimentos_goias)
base_pnadc <- get_pnadc(2023, 4, vars=c("VD4016","V4010", "UF"))
base_pnad23_4ts <- as_survey(base_pnadc) #HABILITANDO PARA O PACOTE SRVYR
renda_med_geral_4tri23Nacional <- base_pnad23_4ts |> #Nacional
filter(V4010 == "2211") |>
summarise(Rend_med_geral = survey_mean(VD4016, na.rm = TRUE)) |>
select(-Rend_med_geral_se)
renda_med_geral_4tri23 <- base_pnad23_4ts |> #Estadual
filter(V4010 == "2211") |>
group_by(UF) |>
summarise(Rend_med_geral = survey_mean(VD4016, na.rm = TRUE)) |>
select(-Rend_med_geral_se)
renda_med_esp_4tri23Nacional <- base_pnad23_4ts |> #Nacional
filter(V4010 == "2212") |>
summarise(Rend_esp_geral = survey_mean(VD4016, na.rm = TRUE)) |>
select(-Rend_esp_geral_se)
renda_med_esp_4tri23 <- base_pnad23_4ts |> #Estadual
filter(V4010 == "2212") |>
group_by(UF) |>
summarise(Rend_med_esp = survey_mean(VD4016, na.rm = TRUE)) |>
select(-Rend_med_esp_se)
renda_med <- renda_med_geral_4tri23 |>
left_join(renda_med_esp_4tri23, by = c("UF" = "UF"))
#| warning: false
options(scipen = 999)
library(tidyverse)
library(readxl)
library(RODBC)
library(geobr)
library(sf)
library(ggplot2)
library(PNADcIBGE)
library(srvyr)
